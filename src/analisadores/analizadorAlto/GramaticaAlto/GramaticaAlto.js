/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaAlto = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,22],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,32],$Vh=[1,33],$Vi=[5,10,17,36,38,41,42,43,44,45,50,51,52,54,55,56,57,61,66],$Vj=[5,10,15,17,36,38,41,42,43,44,45,50,51,52,54,55,56,57,61,66],$Vk=[1,57],$Vl=[2,58],$Vm=[1,61],$Vn=[1,60],$Vo=[1,88],$Vp=[1,73],$Vq=[1,90],$Vr=[1,89],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[10,11,58,59],$VC=[18,21,47],$VD=[2,45],$VE=[1,112],$VF=[1,111],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[12,15,18,21,60,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94],$VV=[2,121],$VW=[1,130],$VX=[1,131],$VY=[1,133],$VZ=[1,153],$V_=[12,15,18],$V$=[10,15,36,38,41,42,43,44,45,50,51,52,54,55,56,57,61,66],$V01=[1,161],$V11=[1,190],$V21=[12,18],$V31=[12,15,18,21,60,78,79,84,85,86,88,89,90,91,92,93,94],$V41=[12,15,18,21,60,78,79,80,81,83,84,85,86,88,89,90,91,92,93,94],$V51=[12,15,18,21,60,84,85,86,88,89,90,91,92,93,94],$V61=[12,15,18,21,60,84,85,86,90,91,92],$V71=[1,214],$V81=[18,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPOS":4,"EOF":5,"CUERPO":6,"SENTECIA":7,"DECLARAR_FUNCION":8,"TIPO":9,"ID":10,"(":11,")":12,"{":13,"SENTENCIAS":14,"}":15,"PARAMETROS":16,"VOID":17,",":18,"PARAMETRO":19,"SENTECIA_DECLARACION":20,"PTCOMA":21,"SENTECIA_ASIGNACION":22,"SENTECIA_IMPRIMIR":23,"SENTENCIA_SI":24,"SENTECIA_WHILE":25,"SENTECIA_DO_WHILE":26,"SENTECIA_BREAK":27,"SENTECIA_CONTINUE":28,"SENTECIA_RETURN":29,"SENTECIA_LLAMADA":30,"ASIGNAR_ARREGLO":31,"DECLARAR_ARREGLO":32,"DEFINIR_ESTRUCTURA":33,"ASIGNAR_ESTRUCURA":34,"SENTECIA_FOR":35,"PRINT":36,"EXPRESION":37,"SI":38,"SENTENCIA_SINO":39,"SINO":40,"WHILE":41,"DO":42,"BREAK":43,"CONTINUE":44,"RETORNO":45,"LISTA_ID":46,"=":47,"TIPO_DEC":48,":=":49,"VAR":50,"CONST":51,"GLOBAL":52,"LISTA_EXPRESION":53,"INT":54,"DOUBLE":55,"BOOLEAN":56,"CHAR":57,"[]":58,"[":59,"]":60,"DEFINE":61,"AS":62,"LISTA_ATRIBUTOS":63,"ATRIBUTO":64,".":65,"FOR":66,"INICIO_FOR":67,"FIN_FOR":68,"EXPRESION_ARITMETICA":69,"EXPRESION_LOGICA":70,"EXPRESION_RELACIONAL":71,"PRIMITIVO":72,"EXPRESION_ARREGLO":73,"ACCESO_ARREGLO":74,"EXPRESION_ESTRUCTURA":75,"EXPRESION_ACCESO_ESTRUCTURA":76,"STRC":77,"-":78,"+":79,"*":80,"/":81,"^^":82,"%":83,"||":84,"&&":85,"^":86,"!":87,">":88,"<":89,"==":90,"===":91,"!=":92,">=":93,"<=":94,"ENTERO":95,"DECIMAL":96,"VERDADERO":97,"FALSO":98,"NULO":99,"CARACTER":100,"CADENA":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ID",11:"(",12:")",13:"{",15:"}",17:"VOID",18:",",21:"PTCOMA",36:"PRINT",38:"SI",40:"SINO",41:"WHILE",42:"DO",43:"BREAK",44:"CONTINUE",45:"RETORNO",47:"=",49:":=",50:"VAR",51:"CONST",52:"GLOBAL",54:"INT",55:"DOUBLE",56:"BOOLEAN",57:"CHAR",58:"[]",59:"[",60:"]",61:"DEFINE",62:"AS",65:".",66:"FOR",77:"STRC",78:"-",79:"+",80:"*",81:"/",82:"^^",83:"%",84:"||",85:"&&",86:"^",87:"!",88:">",89:"<",90:"==",91:"===",92:"!=",93:">=",94:"<=",95:"ENTERO",96:"DECIMAL",97:"VERDADERO",98:"FALSO",99:"NULO",100:"CARACTER",101:"CADENA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[8,7],[8,8],[8,7],[8,8],[16,3],[16,1],[19,2],[14,2],[14,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,1],[23,4],[24,7],[24,8],[39,4],[39,2],[25,7],[26,8],[27,1],[28,1],[29,1],[29,2],[20,2],[20,4],[20,4],[46,3],[46,1],[48,1],[48,1],[48,1],[22,3],[30,4],[30,3],[53,3],[53,1],[9,1],[9,1],[9,1],[9,1],[9,1],[32,5],[31,6],[33,6],[63,3],[63,1],[64,2],[64,4],[64,3],[64,5],[34,5],[35,11],[35,10],[35,9],[35,8],[35,10],[35,9],[35,10],[35,9],[67,1],[67,1],[68,1],[68,1],[37,1],[37,1],[37,1],[37,1],[37,3],[37,1],[37,1],[37,1],[37,1],[37,1],[73,5],[73,3],[75,4],[74,4],[76,3],[69,2],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[70,3],[70,3],[70,3],[70,2],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AstAlto($$[$0-1]); 
break;
case 2: case 13:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 11: case 14: case 34: case 45: case 53: case 63:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 18: case 19: case 29: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 86: case 87: case 88: case 89: case 90:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = new FuncionAlto([$$[$0-6]], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 7:
 this.$ = new FuncionAlto([$$[$0-7]], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 8:
 this.$ = new FuncionAlto(["void"], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 9:
 this.$ = new FuncionAlto(["void"], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 10: case 62:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 12:
 this.$ = [[$$[$0-1]], $$[$0]] 
break;
case 15: case 16: case 17: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 33: case 85:
 this.$ = $$[$0-1]; 
break;
case 30:
 this.$ = new ImprimirAlto($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 31:
 this.$ = new SiAlto($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 32:
 this.$ = new SiAlto($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 35:
 this.$ = new WhileAlto($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new DoWhileAlto($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 37:
 this.$ = new BreakAlto(_$[$0].first_line, _$[$0].first_column); 
break;
case 38:
 this.$ = new ContinueAlto(_$[$0].first_line, _$[$0].first_column); 
break;
case 39:
 this.$ = new ReturnAlto(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 40:
 this.$ = new ReturnAlto($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 41:
 this.$ = new DeclaracionAlto([$$[$0-1]], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 42:
 this.$ = new DeclaracionAlto([$$[$0-3]], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 43:
 this.$ = new DeclaracionSinTipoAlto([$$[$0-3]], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44: case 52:
 this.$ = $$[$0-2], this.$.push($$[$0]); 
break;
case 46:
 this.$ = "var"; 
break;
case 47:
 this.$ = "const"; 
break;
case 48:
 this.$ = "global"; 
break;
case 49:
 this.$ = new AsignacionAlto($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 50:
 this.$ = new LLamadaAlto($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 51:
 this.$ = new LLamadaAlto($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = 'int'; 
break;
case 55:
 this.$ = 'double'; 
break;
case 56:
 this.$ = 'boolean'; 
break;
case 57:
 this.$ = 'char'; 
break;
case 58:
 this.$ = $$[$0].toLocaleLowerCase(); 
break;
case 59:
 this.$ = new DeclararArregloAlto([$$[$0-4]], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 60:
 this.$ = new AsignacionArregloAlto($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 61:
 this.$ = new DefinirEstructura($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 64:
 this.$ = new Atributo([$$[$0-1]], $$[$0], null); 
break;
case 65:
 this.$ = new Atributo([$$[$0-3]], $$[$0-2], $$[$0]); 
break;
case 66:
 this.$ = new Atributo(["Tarry", $$[$0-2]], $$[$0], null); 
break;
case 67:
 this.$ = new Atributo(["Tarry", $$[$0-4]], $$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = new AsignacionEstructuraAlto($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 69:
 this.$ =  new ForAlto($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 70:
 this.$ =  new ForAlto(null, $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 71:
 this.$ =  new ForAlto(null, null, $$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 72:
 this.$ =  new ForAlto(null, null, null, $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 73:
 this.$ =  new ForAlto($$[$0-7], null, $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 74:
 this.$ =  new ForAlto($$[$0-6], null, null, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 75:
 this.$ =  new ForAlto($$[$0-7], $$[$0-5], null, $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 76:
 this.$ =  new ForAlto(null, $$[$0-5], null, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 91:
 this.$ = new ArregloConTipoAlto([$$[$0-3]], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 92:
 this.$ = new ArregloSinTipoAlto($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new CrearEstructuraAlto($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 94:
 this.$ = new AccesoArregloAlto($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 95:
 this.$ = new AccesoEstructuraAlto($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new OperacionAlto(null, null, $$[$0], 'U', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '+', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '*', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 100:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '/', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '^^', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '%', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '||', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '&&', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '^', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new OperacionAlto(null, null, $$[$0], '!', _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '>', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '<', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '==', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '===', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '!=', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '>=', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 113:
 this.$ = new OperacionAlto($$[$0-2], $$[$0], null, '<=', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = new PrimitivoAlto('int', Number(yytext), _$[$0].first_line, _$[$0].first_column); 
break;
case 115:
 this.$ = new PrimitivoAlto('double', Number(yytext), _$[$0].first_line, _$[$0].first_column); 
break;
case 116:
 this.$ = new PrimitivoAlto('boolean', true, _$[$0].first_line, _$[$0].first_column); 
break;
case 117:
 this.$ = new PrimitivoAlto('boolean', false, _$[$0].first_line, _$[$0].first_column); 
break;
case 118:
 this.$ = new PrimitivoAlto('null', 'null', _$[$0].first_line, _$[$0].first_column); 
break;
case 119:
   let a = yytext;
                            if(a.length>2){
                                a = a.substr(1);
                                a = a.substr(-a.length, a.length-1);
                                a = a.replace("\\'", "\'");
                                a = a.replace("\\\"", "\"");
                                a = a.replace("\\\\", "\\");
                                a = a.replace("\\n", "\n");
                                a = a.replace("\\t", "\t");
                                a = a.replace("\\r", "\r");
                            }else
                            {
                                a = '\0';
                            }
                            
                            
                            this.$ = new PrimitivoAlto('char', a, _$[$0].first_line, _$[$0].first_column); 
break;
case 120:
   let a2 = yytext;
                            a2 = a2.substr(1);
                            a2 = a2.substr(-a2.length, a2.length-1);
                            a2 = a2.replace("\\'", "\'");
                            a2 = a2.replace("\\\"", "\"");
                            a2 = a2.replace("\\\\", "\\");
                            a2 = a2.replace("\\n", "\n");
                            a2 = a2.replace("\\t", "\t");
                            a2 = a2.replace("\\r", "\r");
                            this.$ = new PrimitivoAlto('string', a2, _$[$0].first_line, _$[$0].first_column); 
break;
case 121:
 this.$ = new IdentificadorAlto($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:21,10:$V0,17:$V1,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{1:[3]},{5:[1,41],6:42,7:4,8:5,9:21,10:$V0,17:$V1,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),{21:[1,43]},{21:[1,44]},{21:[1,45]},o($Vj,[2,18]),o($Vj,[2,19]),{21:[1,46]},{21:[1,47]},{21:[1,48]},{21:[1,49]},{21:[1,50]},{21:[1,51]},{21:[1,52]},{21:[1,53]},{21:[1,54]},o($Vj,[2,29]),{10:[1,55],46:56,58:$Vk},{10:[1,58]},{10:[1,59]},o([10,58],$Vl,{11:$Vm,47:$Vn,59:[1,62],65:[1,63]}),{11:[1,64]},{11:[1,65]},{11:[1,66]},{13:[1,67]},{21:[2,37]},{21:[2,38]},{10:$Vo,11:$Vp,13:$Vq,21:[2,39],30:74,37:68,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:[1,91]},{11:[1,92]},o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),{10:[2,46]},{10:[2,47]},{10:[2,48]},{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),o($VC,$VD,{11:[1,93]}),{18:[1,95],21:[2,41],47:[1,94]},{10:[1,96]},{11:[1,97]},{49:[1,98]},{10:$Vo,11:$Vp,13:$Vq,30:74,37:99,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,12:[1,101],13:$Vq,30:74,37:102,53:100,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:103,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:[1,104]},{10:$Vo,11:$Vp,13:$Vq,30:74,37:105,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:106,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:107,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{7:109,9:110,10:$V0,14:108,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{21:[2,40],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VU,[2,81]),o($VU,[2,82]),o($VU,[2,83]),o($VU,[2,84]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:127,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VU,[2,86]),o($VU,[2,87]),o($VU,[2,88]),o($VU,[2,89]),o($VU,[2,90]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:128,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:129,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),o($VU,[2,119]),o($VU,[2,120]),o($VU,$VV,{11:$Vm,59:$VW,65:$VX}),{9:132,10:$VY,54:$Vc,55:$Vd,56:$Ve,57:$Vf},{10:$Vo,11:$Vp,13:$Vq,30:74,37:102,53:134,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{62:[1,135]},{9:140,10:[1,141],20:138,21:[1,137],22:139,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,67:136},{9:145,10:$VY,12:[1,142],16:143,19:144,54:$Vc,55:$Vd,56:$Ve,57:$Vf},{10:$Vo,11:$Vp,13:$Vq,30:74,37:146,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:[1,147]},{47:[1,148]},{9:145,10:$VY,12:[1,149],16:150,19:144,54:$Vc,55:$Vd,56:$Ve,57:$Vf},{10:$Vo,11:$Vp,13:$Vq,30:74,37:151,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o([12,21],[2,49],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),{12:[1,152],18:$VZ},o($VU,[2,51]),o($V_,[2,53],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),{60:[1,154],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{47:[1,155]},{12:[1,156],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{12:[1,157],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{12:[1,158],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{7:160,9:110,10:$V0,15:[1,159],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($V$,[2,14]),{10:$V01,46:56,58:$Vk},{10:$Vo,11:$Vp,13:$Vq,30:74,37:162,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:163,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:164,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:165,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:166,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:167,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:168,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:169,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:170,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:171,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:172,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:173,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:174,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:175,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:176,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$Vo,11:$Vp,13:$Vq,30:74,37:177,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{12:[1,178],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VU,[2,96]),o($VU,[2,106]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:179,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:[1,180]},{11:[1,182],59:[1,181]},o($VB,$Vl),{15:[1,183],18:$VZ},{59:[1,184]},{21:[1,185]},{10:$Vo,11:$Vp,13:$Vq,21:[1,187],30:74,37:186,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{21:[2,77]},{21:[2,78]},{10:$V01,46:56},{10:$Vl,47:$Vn},{13:[1,188]},{12:[1,189],18:$V11},o($V21,[2,11]),{10:[1,191]},{21:[2,42],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VC,[2,44]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:192,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{13:[1,193]},{12:[1,194],18:$V11},{21:[2,43],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VU,[2,50]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:195,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{47:[1,196]},{10:$Vo,11:$Vp,13:$Vq,30:74,37:197,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{21:[2,30]},{13:[1,198]},{13:[1,199]},{41:[1,200]},o($V$,[2,13]),o($VC,$VD),o($V31,[2,97],{80:$VG,81:$VH,82:$VI,83:$VJ}),o($V31,[2,98],{80:$VG,81:$VH,82:$VI,83:$VJ}),o($V41,[2,99],{82:$VI}),o($V41,[2,100],{82:$VI}),o($V41,[2,101],{82:$VI}),o($V41,[2,102],{82:$VI}),o([12,15,18,21,60,84,86],[2,103],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,85:$VL,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),o([12,15,18,21,60,84,85,86],[2,104],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),o([12,15,18,21,60,86],[2,105],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),o($V51,[2,107],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ}),o($V51,[2,108],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ}),o($V61,[2,109],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,88:$VN,89:$VO,93:$VS,94:$VT}),o($V61,[2,110],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,88:$VN,89:$VO,93:$VS,94:$VT}),o($V61,[2,111],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,88:$VN,89:$VO,93:$VS,94:$VT}),o($V51,[2,112],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ}),o($V51,[2,113],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ}),o($VU,[2,85]),{60:[1,201],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VU,[2,95]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:202,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{12:[1,203]},o($VU,[2,92]),{9:206,10:$VY,54:$Vc,55:$Vd,56:$Ve,57:$Vf,63:204,64:205},{10:$Vo,11:$Vp,13:$Vq,21:[1,208],30:74,37:207,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{21:[1,209],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{10:$V71,11:$Vp,12:[1,211],13:$Vq,22:212,30:74,37:213,68:210,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{7:109,9:110,10:$V0,14:215,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{13:[1,216]},{9:145,10:$VY,19:217,54:$Vc,55:$Vd,56:$Ve,57:$Vf},o($V21,[2,12]),{21:[2,59],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{7:109,9:110,10:$V0,14:218,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{13:[1,219]},o($V_,[2,52],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),{10:$Vo,11:$Vp,13:$Vq,30:74,37:220,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{21:[2,68],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{7:109,9:110,10:$V0,14:221,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:222,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{11:[1,223]},o($VU,[2,94]),{60:[1,224],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($VU,[2,93]),{18:[1,226],60:[1,225]},o($V81,[2,63]),{10:[1,227],58:[1,228]},{21:[1,229],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{10:$V71,11:$Vp,12:[1,231],13:$Vq,22:212,30:74,37:213,68:230,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{10:$V71,11:$Vp,12:[1,233],13:$Vq,22:212,30:74,37:213,68:232,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{12:[1,234]},{13:[1,235]},{12:[2,79]},{12:[2,80],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o([12,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94],$VV,{11:$Vm,47:$Vn,59:$VW,65:$VX}),{7:160,9:110,10:$V0,15:[1,236],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:237,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($V21,[2,10]),{7:160,9:110,10:$V0,15:[1,238],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:239,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{21:[2,60],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},{7:160,9:110,10:$V0,15:[1,240],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,241],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{10:$Vo,11:$Vp,13:$Vq,30:74,37:242,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VU,[2,91]),{21:[2,61]},{9:206,10:$VY,54:$Vc,55:$Vd,56:$Ve,57:$Vf,64:243},o($V81,[2,64],{47:[1,244]}),{10:[1,245]},{10:$V71,11:$Vp,12:[1,247],13:$Vq,22:212,30:74,37:213,68:246,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{12:[1,248]},{13:[1,249]},{12:[1,250]},{13:[1,251]},{13:[1,252]},{7:109,9:110,10:$V0,14:253,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vi,[2,6]),{7:160,9:110,10:$V0,15:[1,254],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vi,[2,8]),{7:160,9:110,10:$V0,15:[1,255],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,31],{39:256,40:[1,257]}),o($Vj,[2,35]),{12:[1,258],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT},o($V81,[2,62]),{10:$Vo,11:$Vp,13:$Vq,30:74,37:259,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($V81,[2,66],{47:[1,260]}),{12:[1,261]},{13:[1,262]},{13:[1,263]},{7:109,9:110,10:$V0,14:264,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{13:[1,265]},{7:109,9:110,10:$V0,14:266,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:267,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,268],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vi,[2,7]),o($Vi,[2,9]),o($Vj,[2,32]),{13:[1,269],24:270,38:$V3},{21:[2,36]},o($V81,[2,65],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),{10:$Vo,11:$Vp,13:$Vq,30:74,37:271,69:69,70:70,71:71,72:72,73:75,74:76,75:77,76:78,77:$Vr,78:$Vs,87:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{13:[1,272]},{7:109,9:110,10:$V0,14:273,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:274,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,275],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:109,9:110,10:$V0,14:276,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,277],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,278],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,72]),{7:109,9:110,10:$V0,14:279,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,34]),o($V81,[2,67],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT}),{7:109,9:110,10:$V0,14:280,20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,281],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,282],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,74]),{7:160,9:110,10:$V0,15:[1,283],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,76]),o($Vj,[2,71]),{7:160,9:110,10:$V0,15:[1,284],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},{7:160,9:110,10:$V0,15:[1,285],20:6,22:7,23:8,24:9,25:10,26:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:$V2,38:$V3,41:$V4,42:$V5,43:$V6,44:$V7,45:$V8,48:23,50:$V9,51:$Va,52:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,61:$Vg,66:$Vh},o($Vj,[2,75]),o($Vj,[2,73]),o($Vj,[2,70]),o($Vj,[2,33]),o($Vj,[2,69])],
defaultActions: {29:[2,37],30:[2,38],38:[2,46],39:[2,47],40:[2,48],41:[2,1],138:[2,77],139:[2,78],156:[2,30],212:[2,79],225:[2,61],258:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* Comentario de Linea */
break;
case 2:/* Comentario Multi Linea */
break;
case 3:return 96
break;
case 4:return 95
break;
case 5:return 101
break;
case 6:return 100
break;
case 7:return 80
break;
case 8:return 81
break;
case 9:return 78
break;
case 10:return 79
break;
case 11:return 82
break;
case 12:return 86
break;
case 13:return 91
break;
case 14:return 90
break;
case 15:return 92
break;
case 16:return 94
break;
case 17:return 93
break;
case 18:return 89
break;
case 19:return 88
break;
case 20:return 11
break;
case 21:return 12
break;
case 22:return 58
break;
case 23:return 59
break;
case 24:return 60
break;
case 25:return 13
break;
case 26:return 15
break;
case 27:return 47
break;
case 28:return 49
break;
case 29:return ':'
break;
case 30:return 21
break;
case 31:return 87
break;
case 32:return 83
break;
case 33:return 'COMILLA'
break;
case 34:return 18
break;
case 35:return 65
break;
case 36:return 84
break;
case 37:return 85
break;
case 38:return 97
break;
case 39:return 98
break;
case 40:return 99
break;
case 41:return 38
break;
case 42:return 40
break;
case 43:return 41
break;
case 44:return 42
break;
case 45:return 43
break;
case 46:return 44
break;
case 47:return 36
break;
case 48:return 66
break;
case 49:return 54
break;
case 50:return 55
break;
case 51:return 56
break;
case 52:return 57
break;
case 53:return 50
break;
case 54:return 51
break;
case 55:return 52
break;
case 56:return 45
break;
case 57:return 17
break;
case 58:return 77
break;
case 59:return 61
break;
case 60:return 62
break;
case 61:return 10
break;
case 62:return 5
break;
case 63:return 'INVALID'
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/([^\n])*)/i,/^(?:\/\*([^\*])*\*\/)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"([^\"]+|[\r\n])*")/i,/^(?:'([^\'']+|[\r\n])*')/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[\])/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?::=)/i,/^(?::)/i,/^(?:;)/i,/^(?:!)/i,/^(?:%)/i,/^(?:')/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:true)/i,/^(?:false)/i,/^(?:null)/i,/^(?:if)/i,/^(?:else)/i,/^(?:while)/i,/^(?:do)/i,/^(?:break)/i,/^(?:continue)/i,/^(?:print)/i,/^(?:for)/i,/^(?:int)/i,/^(?:double)/i,/^(?:boolean)/i,/^(?:char)/i,/^(?:var)/i,/^(?:const)/i,/^(?:global)/i,/^(?:return)/i,/^(?:void)/i,/^(?:strc)/i,/^(?:define)/i,/^(?:as)/i,/^(?:[a-zA-Z_][_a-zA-Z0-9ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaAlto;
exports.Parser = GramaticaAlto.Parser;
exports.parse = function () { return GramaticaAlto.parse.apply(GramaticaAlto, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}